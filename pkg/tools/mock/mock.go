// Code generated by MockGen. DO NOT EDIT.
// Source: registry.go
//
// Generated by this command:
//
//	mockgen -source registry.go -package mock -destination mock/mock.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	tools "github.com/defryheryanto/ai-assistant/pkg/tools"
	llms "github.com/tmc/langchaingo/llms"
	gomock "go.uber.org/mock/gomock"
)

// MockTool is a mock of Tool interface.
type MockTool struct {
	ctrl     *gomock.Controller
	recorder *MockToolMockRecorder
	isgomock struct{}
}

// MockToolMockRecorder is the mock recorder for MockTool.
type MockToolMockRecorder struct {
	mock *MockTool
}

// NewMockTool creates a new mock instance.
func NewMockTool(ctrl *gomock.Controller) *MockTool {
	mock := &MockTool{ctrl: ctrl}
	mock.recorder = &MockToolMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTool) EXPECT() *MockToolMockRecorder {
	return m.recorder
}

// Definition mocks base method.
func (m *MockTool) Definition() llms.Tool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Definition")
	ret0, _ := ret[0].(llms.Tool)
	return ret0
}

// Definition indicates an expected call of Definition.
func (mr *MockToolMockRecorder) Definition() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Definition", reflect.TypeOf((*MockTool)(nil).Definition))
}

// Execute mocks base method.
func (m *MockTool) Execute(ctx context.Context, toolCall llms.ToolCall) (*llms.MessageContent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, toolCall)
	ret0, _ := ret[0].(*llms.MessageContent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockToolMockRecorder) Execute(ctx, toolCall any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTool)(nil).Execute), ctx, toolCall)
}

// SystemPrompt mocks base method.
func (m *MockTool) SystemPrompt() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SystemPrompt")
	ret0, _ := ret[0].(string)
	return ret0
}

// SystemPrompt indicates an expected call of SystemPrompt.
func (mr *MockToolMockRecorder) SystemPrompt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SystemPrompt", reflect.TypeOf((*MockTool)(nil).SystemPrompt))
}

// MockRegistry is a mock of Registry interface.
type MockRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryMockRecorder
	isgomock struct{}
}

// MockRegistryMockRecorder is the mock recorder for MockRegistry.
type MockRegistryMockRecorder struct {
	mock *MockRegistry
}

// NewMockRegistry creates a new mock instance.
func NewMockRegistry(ctrl *gomock.Controller) *MockRegistry {
	mock := &MockRegistry{ctrl: ctrl}
	mock.recorder = &MockRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistry) EXPECT() *MockRegistryMockRecorder {
	return m.recorder
}

// Execute mocks base method.
func (m *MockRegistry) Execute(ctx context.Context, contextID string, inquiry string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, contextID, inquiry)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockRegistryMockRecorder) Execute(ctx, contextID, inquiry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockRegistry)(nil).Execute), ctx, contextID, inquiry)
}

// GetTools mocks base method.
func (m *MockRegistry) GetTools() []llms.Tool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTools")
	ret0, _ := ret[0].([]llms.Tool)
	return ret0
}

// GetTools indicates an expected call of GetTools.
func (mr *MockRegistryMockRecorder) GetTools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTools", reflect.TypeOf((*MockRegistry)(nil).GetTools))
}

// Register mocks base method.
func (m *MockRegistry) Register(tool tools.Tool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", tool)
}

// Register indicates an expected call of Register.
func (mr *MockRegistryMockRecorder) Register(tool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegistry)(nil).Register), tool)
}
